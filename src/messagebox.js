// https://github.com/ilosey14/messagebox
var messagebox = function (content, buttons, callback) { if (messagebox.isOpen) { messagebox.clear(); messagebox.keepOpen = true; } if (typeof content === 'string') { if (messagebox.templates[content]) messagebox.content.appendChild(messagebox.templates[content]); else messagebox.content.appendChild(document.createElement('div')).innerHTML = content; } else if (content instanceof HTMLElement) messagebox.content.appendChild(content); var buttonCallbacks = {}; if (typeof buttons === 'object') { if (buttons instanceof Array) { for (let value of buttons) buttonCallbacks[value] = null } else buttonCallbacks = buttons; } else if (typeof buttons === 'string') buttonCallbacks[buttons] = null; for (let value in buttonCallbacks) { let button = messagebox.buttons.appendChild(document.createElement('input')); button.type = 'button'; button.value = value; button.onclick = function () { var listener = messagebox.listeners[content], content = messagebox.content.firstElementChild; buttonCallback = buttonCallbacks[this.value]; if (typeof buttonCallback === 'function') buttonCallback(content); if (typeof callback === 'function') callback(value, content); else if (typeof listener === 'function') listener(value, content); if (messagebox.keepOpen) messagebox.keepOpen = false; else messagebox.close(); }; } messagebox.mask.classList.add('show'); messagebox.isOpen = true; if (typeof messagebox.onshow === 'function') messagebox.onshow(); var autofocus = messagebox.content.querySelector('[data-autofocus]'); if (autofocus) autofocus.focus(); else if (messagebox.buttons.firstElementChild) messagebox.buttons.firstElementChild.focus(); }; messagebox.mask = document.getElementById('messagebox-mask'); messagebox.content = document.getElementById('messagebox-content'); messagebox.buttons = document.getElementById('messagebox-buttons'); messagebox.mask.onclick = function (e) { e.stopPropagation(); messagebox.close(); messagebox.keepOpen = false; }; document.getElementById('messagebox-container').onclick = function (e) { e.stopPropagation(); }; messagebox.keepOpen = false; messagebox.isOpen = false; messagebox.templates = {}; messagebox.listeners = {}; messagebox.onshow = undefined; messagebox.onclose = undefined; messagebox.addTemplate = function (name, content, listener) { if (typeof name !== 'string') throw `[messagebox] Template name must be a string, "${typeof name}" given.`; this.templates[name] = content; if (typeof listener === 'function') this.addListener(name, listener); }; messagebox.addListener = function (name, listener) { if (typeof this.templates[name] === 'undefined') throw `[messagebox] Cannot add listener to undefined template "${name}".`; this.listeners[name] = listener; }; messagebox.clear = function () { while (this.content.children.length) this.content.removeChild(this.content.firstElementChild); while (this.buttons.children.length) this.buttons.removeChild(this.buttons.firstElementChild); }; messagebox.close = function () { this.mask.classList.remove('show'); this.isOpen = false; this.clear(); if (typeof this.onclose === 'function') this.onclose(); }; (function () { var templateDOM = document.getElementsByClassName('-messagebox-templates'); while (templateDOM.length) { let templates = templateDOM[0]; for (let template of templates.children) messagebox.addTemplate(template.dataset.name, template); templates.parentElement.removeChild(templates); } })();